/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package loginform;

import java.awt.*;

import javax.lang.model.util.ElementScanner14;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;

/**
 *
 * @author algho
 */
public class NewJFrame extends javax.swing.JFrame {
        Contact cont = new Contact();
        User use = new User();
        Contacts conts = new Contacts();

        /**
         * Creates new form NewJFrame
         */
        public NewJFrame(String email) {
                initComponents();
                setTitle("Book Phone"); // Set the title of the JFrame
                ImageIcon icon = new ImageIcon("src\\main\\java\\com\\mycompany\\swing\\Icons\\4298389.png");
                setIconImage(icon.getImage()); // Set the program icon

                // LOAD table
                ArrayList<Contact> tableValues = conts.returnBookedOBjs(email);
                if (tableValues.size() != 0) {
                        DefaultTableModel model = (DefaultTableModel) booked.getModel();
                        for (Contact co : tableValues) {
                                model.addRow(new Object[] { co.getEmail(), co.getName(), co.getPhone(),
                                                co.getAddress() });
                        }
                }
                ((AbstractTableModel) booked.getModel()).fireTableDataChanged();
                pack(); // Resize the JFrame based on its contents
                setLocationRelativeTo(null); // Center the JFrame on the screen
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jTextField2 = new javax.swing.JTextField();
                jPanel1 = new javax.swing.JPanel();
                userDashboard = new javax.swing.JPanel();
                Name = new javax.swing.JTextField();
                phoneNumber = new javax.swing.JTextField();
                clearButton = new javax.swing.JButton();
                addButton = new javax.swing.JButton();
                deleteBook = new javax.swing.JButton();
                updateButton = new javax.swing.JButton();
                NameLable = new javax.swing.JLabel();
                phoneLable1 = new javax.swing.JLabel();
                addressF = new javax.swing.JTextField();
                NameLable1 = new javax.swing.JLabel();
                deleteButton1 = new javax.swing.JButton();
                javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
                booked = new javax.swing.JTable();
                jButton1 = new javax.swing.JButton();

                jTextField2.setText("jTextField1");
                jTextField2.setName("jTextField2"); // NOI18N

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                setName("Form"); // NOI18N
                getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                jPanel1.setBackground(new java.awt.Color(25, 118, 211));
                jPanel1.setName("jPanel1"); // NOI18N
                jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                userDashboard.setBackground(new java.awt.Color(25, 118, 211));
                userDashboard.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED,
                                java.awt.Color.white, java.awt.Color.white, java.awt.Color.white,
                                java.awt.Color.white));
                userDashboard.setForeground(new java.awt.Color(255, 255, 255));
                userDashboard.setToolTipText("");
                userDashboard.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
                userDashboard.setName("userDashboard"); // NOI18N
                userDashboard.setOpaque(false);
                userDashboard.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                Name.setText("sad");
                Name.setToolTipText("");
                Name.setName("Name"); // NOI18N
                userDashboard.add(Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 148, 361, 49));

                phoneNumber.setText("01000627666");
                phoneNumber.setName("phoneNumber"); // NOI18N
                userDashboard.add(phoneNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 51, 360, 49));

                clearButton.setBackground(new java.awt.Color(240, 240, 240));
                clearButton.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
                clearButton.setIcon(new javax.swing.ImageIcon(
                                getClass().getResource("/com/mycompany/swing/Icons/eraser.png"))); // NOI18N
                clearButton.setText("Clear");
                clearButton.setBorder(null);
                clearButton.setName("clearButton"); // NOI18N
                clearButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                clearButtonActionPerformed(evt);
                        }
                });
                userDashboard.add(clearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(233, 396, 165, 41));

                addButton.setBackground(new java.awt.Color(240, 240, 240));
                addButton.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
                addButton.setIcon(new javax.swing.ImageIcon(
                                getClass().getResource("/com/mycompany/swing/Icons/add.png"))); // NOI18N
                addButton.setText("Book");
                addButton.setBorder(null);
                addButton.setName("addButton"); // NOI18N
                addButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                addButtonActionPerformed(evt);
                        }
                });
                userDashboard.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 396, 165, 41));

                deleteBook.setBackground(new java.awt.Color(240, 240, 240));
                deleteBook.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
                deleteBook.setIcon(new javax.swing.ImageIcon(
                                getClass().getResource("/com/mycompany/swing/Icons/delete.png"))); // NOI18N
                deleteBook.setText("Delete Booking");
                deleteBook.setBorder(null);
                deleteBook.setName("deleteBook"); // NOI18N
                deleteBook.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                deleteBookActionPerformed(evt);
                        }
                });
                userDashboard.add(deleteBook, new org.netbeans.lib.awtextra.AbsoluteConstraints(126, 328, 165, 41));

                updateButton.setBackground(new java.awt.Color(240, 240, 240));
                updateButton.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
                updateButton.setIcon(new javax.swing.ImageIcon(
                                getClass().getResource("/com/mycompany/swing/Icons/updated.png"))); // NOI18N
                updateButton.setText("Update");
                updateButton.setBorder(null);
                updateButton.setName("updateButton"); // NOI18N
                updateButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                updateButtonActionPerformed(evt);
                        }
                });
                userDashboard.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(233, 475, 165, 41));

                NameLable.setBackground(new java.awt.Color(255, 255, 255));
                NameLable.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
                NameLable.setIcon(new javax.swing.ImageIcon(
                                getClass().getResource("/com/mycompany/swing/Icons/signature.png"))); // NOI18N
                NameLable.setLabelFor(NameLable);
                NameLable.setText("Name");
                NameLable.setName("NameLable"); // NOI18N
                userDashboard.add(NameLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 118, 392, -1));

                phoneLable1.setBackground(new java.awt.Color(255, 255, 255));
                phoneLable1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
                phoneLable1.setIcon(new javax.swing.ImageIcon(
                                getClass().getResource("/com/mycompany/swing/Icons/smartphone.png"))); // NOI18N
                phoneLable1.setLabelFor(phoneNumber);
                phoneLable1.setText("Phone Number");
                phoneLable1.setName("phoneLable1"); // NOI18N
                userDashboard.add(phoneLable1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 13, 392, -1));

                addressF.setText("sad123");
                addressF.setToolTipText("");
                addressF.setName("addressF"); // NOI18N
                userDashboard.add(addressF, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 245, 361, 49));

                NameLable1.setBackground(new java.awt.Color(255, 255, 255));
                NameLable1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
                NameLable1.setIcon(new javax.swing.ImageIcon(
                                getClass().getResource("/com/mycompany/swing/Icons/address.png"))); // NOI18N
                NameLable1.setLabelFor(NameLable);
                NameLable1.setText("Address");
                NameLable1.setName("NameLable1"); // NOI18N
                userDashboard.add(NameLable1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 215, 398, -1));

                deleteButton1.setBackground(new java.awt.Color(240, 240, 240));
                deleteButton1.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
                deleteButton1.setIcon(new javax.swing.ImageIcon(
                                getClass().getResource("/com/mycompany/swing/Icons/delete.png"))); // NOI18N
                deleteButton1.setText("Delete Account");
                deleteButton1.setBorder(null);
                deleteButton1.setName("deleteButton1"); // NOI18N
                deleteButton1.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                deleteButton1MouseClicked(evt);
                        }
                });
                deleteButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                deleteButton1ActionPerformed(evt);
                        }
                });
                userDashboard.add(deleteButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 475, 165, 41));

                jPanel1.add(userDashboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 23, -1, 540));

                jScrollPane1.setName("jScrollPane1"); // NOI18N

                booked.setBackground(new java.awt.Color(225, 225, 225));
                booked.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
                booked.setModel(new javax.swing.table.DefaultTableModel(
                                new Object[][] {

                                },
                                new String[] {
                                                "Email", "Name", "Phone Number", "Address"
                                }) {
                        Class[] types = new Class[] {
                                        java.lang.String.class, java.lang.String.class, java.lang.String.class,
                                        java.lang.String.class
                        };
                        boolean[] canEdit = new boolean[] {
                                        false, false, false, false
                        };

                        public Class getColumnClass(int columnIndex) {
                                return types[columnIndex];
                        }

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit[columnIndex];
                        }
                });
                booked.setFocusable(false);
                booked.setGridColor(new java.awt.Color(255, 255, 255));
                booked.setName("booked"); // NOI18N
                booked.setShowGrid(true);
                jScrollPane1.setViewportView(booked);

                jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 23, -1, 489));

                jButton1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
                jButton1.setForeground(new java.awt.Color(255, 51, 51));
                jButton1.setText("Logout");
                jButton1.setBorder(null);
                jButton1.setBorderPainted(false);
                jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                jButton1.setName("jButton1"); // NOI18N
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton1ActionPerformed(evt);
                        }
                });
                jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 654, -1, -1));

                getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
                jPanel1.getAccessibleContext().setAccessibleName("Book phone");

                pack();
        }// </editor-fold>//GEN-END:initComponents

        private void deleteButton1MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_deleteButton1MouseClicked

        }// GEN-LAST:event_deleteButton1MouseClicked

        private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
                login LoginFrame = new login();
                LoginFrame.setVisible(true);
                LoginFrame.pack();
                LoginFrame.setLocationRelativeTo(null);
                this.dispose();
        }// GEN-LAST:event_jButton1ActionPerformed

        private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {
                String name = Name.getText();
                String phone = phoneNumber.getText();
                String address = addressF.getText();

                boolean validName = false, validPhone = false, validAddress = false;
                DefaultTableModel model = (DefaultTableModel) booked.getModel();

                if (phone.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Please fill out the phone number field",
                                        "Missing Information", JOptionPane.WARNING_MESSAGE);
                } else {
                        if (use.validPhone(phone)) {
                                validPhone = true;
                                if (name.isEmpty()) {
                                        JOptionPane.showMessageDialog(null, "Please fill out the name field",
                                                        "Missing Information", JOptionPane.WARNING_MESSAGE);
                                } else {
                                        if (use.validName(name)) {
                                                validName = true;
                                                if (address.isEmpty()) {
                                                        JOptionPane.showMessageDialog(null,
                                                                        "Please fill out the address field",
                                                                        "Missing Information",
                                                                        JOptionPane.WARNING_MESSAGE);
                                                } else {
                                                        if (use.validAddress(address)) {
                                                                validAddress = true;
                                                        } else {
                                                                JOptionPane.showMessageDialog(null,
                                                                                "Please enter a valid address",
                                                                                "Invalid Information",
                                                                                JOptionPane.WARNING_MESSAGE);
                                                        }
                                                }
                                        } else {
                                                JOptionPane.showMessageDialog(null, "Please enter a valid name",
                                                                "Invalid Information", JOptionPane.WARNING_MESSAGE);
                                        }
                                }
                        } else {
                                JOptionPane.showMessageDialog(null, "Please enter a valid phone number",
                                                "Invalid Information", JOptionPane.WARNING_MESSAGE);
                        }

                        if (validAddress && validName && validPhone) {
                                try {
                                        // Encrypt the phone number before adding to the table
                                        if (!conts.isDuplicated(phone)) {
                                                int emailId = Integer
                                                                .parseInt(JOptionPane.showInputDialog("Enter your ID"));
                                                String email = (JOptionPane.showInputDialog("Enter your email"));
                                                String BookPhone = (JOptionPane.showInputDialog(
                                                                "Enter the phone number that you used for booking"));

                                                if (conts.emailAndIdExists(emailId, email)) {
                                                        if (conts.exists(BookPhone)) {
                                                                Contact search = conts.returnPhoneObjById(emailId);
                                                                String objectEPhone = search.getephone();
                                                                DefaultTableModel model1 = (DefaultTableModel) booked
                                                                                .getModel();

                                                                for (int i = 0; i < model1.getRowCount(); i++) {
                                                                        if (!phone.equals(objectEPhone)) {
                                                                                String enPhone = PhoneNumberEncryptor
                                                                                                .encrypt(phone);
                                                                                model1.setValueAt(phone, i,
                                                                                                2);
                                                                                search.setPhone(phone);
                                                                                search.setephone(enPhone);
                                                                        }
                                                                        if (!address.equals(
                                                                                        search.getAddress())) {

                                                                                model1.setValueAt(address, i,
                                                                                                3);
                                                                                search.setAddress(address);
                                                                        }
                                                                        if (!name.equals(search.getName())) {
                                                                                model1.setValueAt(name, i, 1);
                                                                                search.setName(name);
                                                                        }
                                                                        // Exit the loop after updating the row
                                                                        break;
                                                                }
                                                        } else {
                                                                JOptionPane.showMessageDialog(null,
                                                                                "The entered phone number doesn't exist",
                                                                                "Invalid input",
                                                                                JOptionPane.WARNING_MESSAGE);
                                                        }
                                                } else {
                                                        JOptionPane.showMessageDialog(null,
                                                                        "This ID isn't connected to this email",
                                                                        "Invalid input", JOptionPane.WARNING_MESSAGE);
                                                }

                                                if (!phone.isEmpty() || !name.isEmpty() || !address.isEmpty()) {
                                                        Name.setText("");
                                                        phoneNumber.setText("");
                                                        addressF.setText("");
                                                }
                                        } else {
                                                JOptionPane.showMessageDialog(null,
                                                                "This phone number is already in the system, please enter another one",
                                                                "Invalid Information", JOptionPane.WARNING_MESSAGE);
                                        }
                                } catch (Exception e) {
                                        e.printStackTrace();

                                }
                        }
                }
        }

        private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_clearButtonActionPerformed
                String name = Name.getText();
                String phone = phoneNumber.getText();
                String address = addressF.getText();
                if (!phone.isEmpty() || !name.isEmpty() || !address.isEmpty()) {
                        Name.setText("");
                        phoneNumber.setText("");
                        addressF.setText("");
                } else {
                        JOptionPane.showMessageDialog(null, "Nothing to clear",
                                        "invalid Click", JOptionPane.WARNING_MESSAGE);
                }
        }// GEN-LAST:event_clearButtonActionPerformed

        private void deleteBookActionPerformed(java.awt.event.ActionEvent evt) {
                int rowCount = booked.getRowCount();

                if (rowCount > 0) {
                        int[] selectedRows = booked.getSelectedRows();

                        if (selectedRows.length > 0) {
                                String idToDelete = JOptionPane.showInputDialog("Enter your ID:");
                                String emailToDelete = JOptionPane.showInputDialog("Enter your Email:");

                                if (idToDelete != null && !idToDelete.isEmpty()) {
                                        int id = Integer.parseInt(idToDelete);

                                        if (id > 0) {
                                                if (conts.idExists(id)) {
                                                        if (conts.emailExists(emailToDelete)) {
                                                                try {
                                                                        DefaultTableModel model = (DefaultTableModel) booked
                                                                                        .getModel();

                                                                        for (int i = selectedRows.length
                                                                                        - 1; i >= 0; i--) {
                                                                                int row = selectedRows[i];
                                                                                String en = (String) model
                                                                                                .getValueAt(row, 0);

                                                                                model.removeRow(row);
                                                                                conts.deleteBookedContactsViaEmail(
                                                                                                emailToDelete);
                                                                                use.displayAll();
                                                                        }

                                                                        // Display a message indicating successful
                                                                        // deletion
                                                                        JOptionPane.showMessageDialog(null,
                                                                                        "Selected bookings have been deleted successfully.",
                                                                                        "Deletion Successful",
                                                                                        JOptionPane.INFORMATION_MESSAGE);

                                                                } catch (Exception e) {
                                                                        e.printStackTrace(); // Handle the exception
                                                                                             // appropriately for your
                                                                                             // application
                                                                }
                                                        } else {
                                                                JOptionPane.showMessageDialog(null,
                                                                                "Email not found. Deletion failed.",
                                                                                "Deletion Failed",
                                                                                JOptionPane.ERROR_MESSAGE);
                                                        }
                                                } else {
                                                        // Display a message indicating that the ID does not exist
                                                        JOptionPane.showMessageDialog(null,
                                                                        "ID not found. Deletion failed.",
                                                                        "Deletion Failed",
                                                                        JOptionPane.WARNING_MESSAGE);
                                                }
                                        } else {
                                                // Display a message indicating that the ID is not valid
                                                JOptionPane.showMessageDialog(null,
                                                                "Invalid ID. Please enter a positive integer.",
                                                                "Deletion Failed", JOptionPane.WARNING_MESSAGE);
                                        }
                                } else {
                                        // Display a message indicating that the user canceled the deletion process
                                        JOptionPane.showMessageDialog(null,
                                                        "Deletion canceled. No ID or phone number entered.",
                                                        "Deletion Canceled",
                                                        JOptionPane.WARNING_MESSAGE);
                                }
                        } else {
                                JOptionPane.showMessageDialog(null, "Please select the rows you want to delete",
                                                "Deletion Canceled",
                                                JOptionPane.WARNING_MESSAGE);
                        }
                } else {
                        JOptionPane.showMessageDialog(null, "The table is empty. Nothing to delete.",
                                        "Deletion Canceled",
                                        JOptionPane.WARNING_MESSAGE);
                }
        }

        // GEN-LAST:event_deleteBookActionPerformed

        private void deleteButton1ActionPerformed(java.awt.event.ActionEvent evt) {
                String userEmail = JOptionPane.showInputDialog(null, "Enter your Email for confirmation:");
                int userID = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter your ID for confirmation:"));
                if (userEmail != null && !userEmail.isEmpty() && userID != 0) {

                        if (conts.emailAndIdExists(userID, userEmail)) {
                                System.out.println("Found your email for deleteion");
                                Contact obj = conts.returnEmailObj(userEmail);
                                String email = obj.getEmail();
                                DefaultTableModel model = (DefaultTableModel) booked.getModel();
                                for (int i = 0; i < model.getRowCount(); i++) {
                                        if (model.getValueAt(i, 0).equals(email)) {
                                                model.removeRow(i);
                                        }
                                        conts.deleteAccount(userEmail);
                                }
                                conts.deleteContactsViaEmail(userEmail);
                                JOptionPane.showMessageDialog(null, "Your account has been deleted",
                                                "Deletion complete", JOptionPane.ERROR_MESSAGE);
                                SignUp SignUpFrame = new SignUp();
                                SignUpFrame.setVisible(true);
                                SignUpFrame.pack();
                                SignUpFrame.setLocationRelativeTo(null);
                                this.dispose();
                        } else {
                                JOptionPane.showMessageDialog(null,
                                                "this account connected this ID isn't in the system",
                                                "Invalid Account", JOptionPane.ERROR_MESSAGE);
                        }

                } else {
                        JOptionPane.showMessageDialog(null, "Invalid Id or Email",
                                        "Invalid Account", JOptionPane.ERROR_MESSAGE);
                }
                try {
                        // Check if the provided email, phone, and ID match an existing account
                        if (conts.emailExists(userEmail)) {

                        }

                } catch (Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Error while processing the account deletion",
                                        "Deletion Error", JOptionPane.ERROR_MESSAGE);
                }
        }

        // GEN-LAST:event_deleteButton1ActionPerformed

        private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {
                String name = Name.getText();
                String phone = phoneNumber.getText();
                String address = addressF.getText();

                boolean validName = false, validPhone = false, validAddress = false;
                DefaultTableModel model = (DefaultTableModel) booked.getModel();

                if (phone.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Please fill out the phone number field",
                                        "Missing Information", JOptionPane.WARNING_MESSAGE);
                } else {
                        if (use.validPhone(phone)) {
                                validPhone = true;
                                if (name.isEmpty()) {
                                        JOptionPane.showMessageDialog(null, "Please fill out the name field",
                                                        "Missing Information", JOptionPane.WARNING_MESSAGE);
                                } else {
                                        if (use.validName(name)) {
                                                validName = true;
                                                if (address.isEmpty()) {
                                                        JOptionPane.showMessageDialog(null,
                                                                        "Please fill out the address field",
                                                                        "Missing Information",
                                                                        JOptionPane.WARNING_MESSAGE);
                                                } else {
                                                        if (use.validAddress(address)) {
                                                                validAddress = true;
                                                        } else {
                                                                JOptionPane.showMessageDialog(null,
                                                                                "Please enter a valid address",
                                                                                "Invalid Information",
                                                                                JOptionPane.WARNING_MESSAGE);
                                                        }
                                                }
                                        } else {
                                                JOptionPane.showMessageDialog(null, "Please enter a valid name",
                                                                "Invalid Information", JOptionPane.WARNING_MESSAGE);
                                        }
                                }
                        } else {
                                JOptionPane.showMessageDialog(null, "Please enter a valid phone number",
                                                "Invalid Information", JOptionPane.WARNING_MESSAGE);
                        }

                        if (validAddress && validName && validPhone) {
                                try {
                                        // Encrypt the phone number before adding to the table
                                        if (!conts.isDuplicated(phone)) {
                                                int emailId = Integer
                                                                .parseInt(JOptionPane.showInputDialog("Enter your ID"));
                                                if (conts.idExists(emailId)) {
                                                        Contact search = conts.returnPhoneObjById(emailId);
                                                        String objEmail = search.getEmail();
                                                        System.out.println("I found the ID");
                                                        System.err.println(objEmail);
                                                        String encryptedEmail = EmailEncryptor.encrypt(objEmail);
                                                        String encryptedPhone = PhoneNumberEncryptor.encrypt(phone);
                                                        System.out.println("i reached encrypted phone" + phone);
                                                        search.setAddress(address);
                                                        search.setPhone(phone);
                                                        search.seteEmail(encryptedEmail);

                                                        Contact obj = new Contact(name, phone, encryptedPhone, address,
                                                                        objEmail, encryptedEmail);
                                                        obj.setID(emailId);
                                                        obj.setBook(1);
                                                        conts.addContact(obj); // Use the addContact method consistently
                                                        System.out.println(obj.getID());
                                                        model.addRow(new Object[] { objEmail, name,
                                                                        phone,
                                                                        address });
                                                        use.displayAll();
                                                        if (!phone.isEmpty() || !name.isEmpty()
                                                                        || !address.isEmpty()) {
                                                                Name.setText("");
                                                                phoneNumber.setText("");
                                                                addressF.setText("");
                                                        }
                                                } else {
                                                        JOptionPane.showMessageDialog(null,
                                                                        "invalid id connected your email",
                                                                        "Invalid Information",
                                                                        JOptionPane.WARNING_MESSAGE);
                                                }
                                        }

                                        else {
                                                JOptionPane.showMessageDialog(null,
                                                                "This phone number is already in the system, please enter another one",
                                                                "Invalid Information", JOptionPane.WARNING_MESSAGE);
                                        }
                                } catch (Exception e) {
                                        e.printStackTrace();

                                }
                        }
                }
        }
        // GEN-LAST:event_addButtonActionPerformed

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
                /* Set the Nimbus look and feel */
                // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
                // (optional) ">
                /*
                 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
                 * look and feel.
                 * For details see
                 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
                 */
                try {
                        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                                        .getInstalledLookAndFeels()) {
                                if ("Nimbus".equals(info.getName())) {
                                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                        break;
                                }
                        }
                } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(NewJFrame.class.getName())
                                        .log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                        java.util.logging.Logger.getLogger(NewJFrame.class.getName())
                                        .log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                        java.util.logging.Logger.getLogger(NewJFrame.class.getName())
                                        .log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                        java.util.logging.Logger.getLogger(NewJFrame.class.getName())
                                        .log(java.util.logging.Level.SEVERE, null, ex);
                }
                // </editor-fold>
                // </editor-fold>

                /* Create and display the form */
                java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                                new NewJFrame().setVisible(true);
                        }
                });
        }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JTextField Name;
        private javax.swing.JLabel NameLable;
        private javax.swing.JLabel NameLable1;
        private javax.swing.JButton addButton;
        private javax.swing.JTextField addressF;
        private javax.swing.JTable booked;
        private javax.swing.JButton clearButton;
        private javax.swing.JButton deleteBook;
        private javax.swing.JButton deleteButton1;
        private javax.swing.JButton jButton1;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JTextField jTextField2;
        private javax.swing.JLabel phoneLable1;
        private javax.swing.JTextField phoneNumber;
        private javax.swing.JButton updateButton;
        private javax.swing.JPanel userDashboard;
        // End of variables declaration//GEN-END:variables
}
